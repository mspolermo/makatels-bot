
import { frontendLink, telegramToken } from './src/config/config';
import {
    AdditionalMenuResponse,
    FilmsGeneralMenuResponse,
    FilmsMirrorMenuResponse,
    InitialMessageResponse,
    TaxiGeneralMenuResponse,
    TaxiTypeMenuResponse
} from './src/core/services/BotResponses/BotResponses';
import { ReplyChecker } from './src/infrastructure/replyChecker/replyChecker';
import { EmailSender } from './src/infrastructure/emailSender/emailSender';
import TelegramBot from 'node-telegram-bot-api';
import { BotStateManager } from './src/core/services/BotStateManager/BotStateManager';
import { moviesMirrorModel } from './src/core/model/MoviesMirrorModel/MoviesMirrorModel';

const bot: TelegramBot = new TelegramBot(telegramToken, { polling: true });

const initialMessage = InitialMessageResponse.getResponse()
const getFilmsGeneralMenuAnswer = FilmsGeneralMenuResponse.getResponse()
const getTaxiGeneralMenuAnswer =  TaxiGeneralMenuResponse.getResponse()
const getAdditionalMenuAnswer = AdditionalMenuResponse.getResponse()

class BotHandler {
    private botStateManager: BotStateManager;

    constructor() {
        this.botStateManager = new BotStateManager();
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–¥–±–µ–∫–∞ –Ω–∞ –ø–æ—á—Ç—É –≤ —Å–ª—É—á–∞–µ –∫—Ä–∞—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async handleUncaughtException(error: Error): Promise<void> {
        console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
        await (new EmailSender()).sendEmail('feedback', undefined, `–ü—Ä–æ–∏–∑–æ—à–µ–ª –∫—Ä–∞—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`);
    }

    async handleUnhandledRejection(reason: any): Promise<void> {
        console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Promise rejection:', reason);
        await (new EmailSender()).sendEmail('feedback', undefined, `–ü—Ä–æ–∏–∑–æ—à–µ–ª –∫—Ä–∞—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${reason}`);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —é–∑–µ—Ä–∞
    async handleMessage(msg: any): Promise<void> {
        const chatId = msg.chat.id;
        const messageText = msg.text;

        if (this.botStateManager.isWaitingForFeedback(chatId)) {
            await (new EmailSender()).sendEmail('feedback', undefined, messageText);
            await this.botStateManager.clearWaitingForFeedback(chatId);
            await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ! –§–∏–¥–±—ç–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É');
            setTimeout(() => bot.sendPhoto(chatId, './public/init.jpg', initialMessage), 2000);
        } else if (messageText === '/kinoland') {
            await (new ReplyChecker(chatId, bot, 'kinoland')).checkReply();
        } else if (messageText === '/hdrezka') {
            await (new ReplyChecker(chatId, bot, 'hdrezka')).checkReply();
        } else if (messageText === '/buses') {
            await bot.sendMessage(chatId, '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–æ–≤', {
                reply_markup: {
                    inline_keyboard: [[{
                        text: 'üöç –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ üöç',
                        web_app: { url: frontendLink }
                    }]]
                }
            });
        } else {
            await bot.sendPhoto(chatId, './public/init.jpg', initialMessage);
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º
    async handleCallbackQuery(query: any): Promise<void> {
        if (!query.message || !query.data) return;
        const chatId = query.message.chat.id;

        try {
            await bot.deleteMessage(chatId, query.message.message_id);
        } catch (error) {
            const errorMessage = (error as Error).message;
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorMessage);
            await (new EmailSender()).sendEmail('feedback', undefined, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º: ${errorMessage}`);
        }

        const mirrorType = this.botStateManager.getMirrorType(chatId);
        // –û–±—è–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ—Å–µ—Ä–≤–∏—Å–æ–≤
        const choiceMenuData = FilmsMirrorMenuResponse.getResponseViaMoviesMirrorType(query.data as moviesMirrorModel, chatId, this.botStateManager.setMirrorType.bind(this.botStateManager))

        switch (query.data) {
            //–í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:
            case 'movies': // –í–∏–¥–µ–æ
                await bot.sendPhoto(chatId, `./public/videoService.jpg`, getFilmsGeneralMenuAnswer);
                break;
            case 'taxi': // –¢–∞–∫—Å–∏
                await bot.sendPhoto(chatId, `./public/taxiGeneral.jpg`, getTaxiGeneralMenuAnswer);
                break;
            case 'additional': // –î—Ä—É–≥–æ–µ
                await bot.sendPhoto(chatId, `./public/logo.jpg`, getAdditionalMenuAnswer);
                break;
            // –í –º–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤:
            case 'kinoland': // KINOLAND
            if (choiceMenuData !== null) {
                await bot.sendPhoto(chatId, `./public/${query.data}.jpg`, choiceMenuData);
            }
                break;
            case 'hdrezka': // HDREZKA
            if (choiceMenuData !== null) {
                await bot.sendPhoto(chatId, `./public/${query.data}.jpg`, choiceMenuData);
            }
                break;
            // –í –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–µ—Ä–∫–∞–ª–∞–º–∏ –∫–∏–Ω—á–∏–∫–æ–≤:
            case 'checkLastReply': // –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Å—ã–ª—å
                await (new ReplyChecker(chatId, bot, mirrorType!)).checkReply();
                break;
            case 'sendReq': // –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª—å –Ω–∞ –∑–µ—Ä–∫–∞–ª–æ
                await (new EmailSender).sendEmail('mirror', mirrorType);
                await bot.sendMessage(1, '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É. –ï—Å–ª–∏ –æ–Ω–∞ –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç, —Å–æ–∑–¥–∞–π —Ä–µ–ø–æ—Ä—Ç');
                setTimeout(() => bot.sendPhoto(chatId, './public/init.jpg', initialMessage), 2000);
                break;
            case 'createTicket': // –°—Å—ã–ª—å –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
                await (new EmailSender).sendEmail('ticket', mirrorType);
                await bot.sendMessage(chatId, '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏');
                setTimeout(() => bot.sendPhoto(chatId, './public/init.jpg', initialMessage), 2000);
                break;
            // –í –º–µ–Ω—é —Ç–∞–∫—Å–∏:
            case 'taxiOnline': // –ó–∞–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–∫—Å–∏ –æ–Ω–ª–∞–π–Ω
                await bot.sendPhoto(chatId, './public/taxi.jpg', { ...(TaxiTypeMenuResponse.getResponseViaTaxiType('online')) });
                break;
            case 'taxiSouth': // –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ –≥–æ—Ä–æ–¥—É (—é–≥)
                await bot.sendPhoto(chatId, './public/south.jpg', { ...(TaxiTypeMenuResponse.getResponseViaTaxiType('south'))});
                break;
            case 'taxiNorth': // –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ –≥–æ—Ä–æ–¥—É (—Å–µ–≤–µ—Ä)
                await bot.sendPhoto(chatId, './public/north.jpg', { ...(TaxiTypeMenuResponse.getResponseViaTaxiType('north'))});
                break;
            // –í –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
            case 'suggest': // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
                this.botStateManager.setWaitingForFeedback(chatId);
                await bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–∏–¥–µ—Ç—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ');
                break;
            case 'report': // –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
                this.botStateManager.setWaitingForFeedback(chatId);
                await bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å');
                break;
            // –î—Ä—É–≥–∏–µ
            case 'mainMenu': // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await bot.sendPhoto(chatId, './public/init.jpg', initialMessage);
                break;
            default:
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–∞–∫—Å–∏
                if (query.data.startsWith('tel:')) {
                    const taxiData = query.data.split('|');
                    const phoneNumber = taxiData[0].replace('tel:', '');
                    const taxiName = taxiData[1];
                    await bot.sendMessage(chatId, `–ù–∞–±–∏—Ä–∞–π ${taxiName}, –±—Ä–∞—Ç: ${phoneNumber}`);
                    
                    if (taxiName.includes('—é–≥')) {
                        setTimeout(() => bot.sendPhoto(chatId, './public/south.jpg', { ...(TaxiTypeMenuResponse.getResponseViaTaxiType('south'))}), 3000);
                    } else if (taxiName.includes('—Å–µ–≤–µ—Ä')) {
                        setTimeout(() => bot.sendPhoto(chatId, './public/taxi.jpg', { ...(TaxiTypeMenuResponse.getResponseViaTaxiType('north'))}), 3000);
                    } else {
                        setTimeout(() => bot.sendPhoto(chatId, './public/taxi.jpg', { ...(TaxiTypeMenuResponse.getResponseViaTaxiType('online'))}), 3000);
                    }
                    
                }
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥—Ä—É–ø–ø—ã –≤ Telegram
                if (query.data.startsWith('link:')) {
                    const groupLink = query.data.replace('link:', '');
                    await bot.sendMessage(chatId, `–õ–∏–Ω–∫ –Ω–∞ –≥—Ä—É–ø–ø—É: ${groupLink}`);
                }
                break;
        }
    }
}

const botHandler = new BotHandler();

process.on('uncaughtException', botHandler.handleUncaughtException);
process.on('unhandledRejection', botHandler.handleUnhandledRejection);

bot.on('message', botHandler.handleMessage.bind(botHandler));
bot.on('callback_query', botHandler.handleCallbackQuery.bind(botHandler));