import { bot }  from './src/system/settings/botInit';
import { BotStateManager } from './src/system/settings/botStateManager';
import { sendEmail } from './src/utils/sendEmail';
import { checkReply } from './src/utils/checkReply';
import {
    initialMessage,
    getFilmsGeneralMenuAnswer,
    getFilmsMirrorMenuAnswer,
    getTaxiGeneralMenuAnswer,
    getTaxiTypeMenuAnswer,
    getAdditionalMenuAnswer
} from './src/system/answers';
import { moviesMirrorType } from './src/types/types';
import { frontendLink } from './src/config/config';

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–¥–±–µ–∫–∞ –Ω–∞ –ø–æ—á—Ç—É –≤ —Å–ª—É—á–∞–µ –∫—Ä–∞—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.on('uncaughtException', async (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
    await sendEmail('feedback', undefined, `–ü—Ä–æ–∏–∑–æ—à–µ–ª –∫—Ä–∞—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`);
});
process.on('unhandledRejection', async (reason) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Promise rejection:', reason);
    await sendEmail('feedback', undefined, `–ü—Ä–æ–∏–∑–æ—à–µ–ª –∫—Ä–∞—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${reason}`);
});

const botStateManager = new BotStateManager();

bot.setMyCommands([
    {command: '/start', description: '–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'},
    {command: '/kinoland', description: '–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Å–ª—ã–∫–∞ –Ω–∞ kinoland'},
    {command: '/hdrezka', description: '–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Å–ª—ã–∫–∞ –Ω–∞ hdrezka'},
    {command: '/buses', description: '–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤'}
])

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —é–∑–µ—Ä–∞
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const messageText = msg.text;

    if (botStateManager.isWaitingForFeedback(chatId)) {
        await sendEmail('feedback', undefined, messageText);
        await botStateManager.clearWaitingForFeedback(chatId);
        await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ! –§–∏–¥–±—ç–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É');
        setTimeout(() => bot.sendPhoto(chatId, './public/init.jpg', initialMessage), 2000);
    } else if (messageText === '/kinoland' ) {
        await checkReply(chatId, 'kinoland');
    } else if (messageText === '/hdrezka' ) {
        await checkReply(chatId, 'hdrezka');
    } else if (messageText === '/buses' ) {
        await bot.sendMessage(chatId, '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–æ–≤', {
            reply_markup: {
                inline_keyboard: [[{
                    text: 'üöç –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ üöç',
                    web_app: { url: frontendLink }
                }]]
            }
        });
    } else {
        await bot.sendPhoto(chatId, './public/init.jpg', initialMessage);
    }
});

// –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º
bot.on('callback_query', async (query) => {
    if (!query.message) return;
    if (!query.data) return;
    const chatId = query.message.chat.id;

    try {
        await bot.deleteMessage(chatId, query.message.message_id);
    } catch (error) {
        const errorMessage = (error as Error).message;
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorMessage);
        await sendEmail('feedback', undefined, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º: ${errorMessage}`);
    }

    const mirrorType = botStateManager.getMirrorType(chatId);
    const choiceMenuData = getFilmsMirrorMenuAnswer(query.data as moviesMirrorType, chatId, botStateManager.setMirrorType.bind(botStateManager));

    
    switch (query.data) {
        //–í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:
        case 'movies': // –í–∏–¥–µ–æ
            await bot.sendPhoto(chatId, `./public/videoService.jpg`, getFilmsGeneralMenuAnswer());
            break;
        case 'taxi': // –¢–∞–∫—Å–∏
            await bot.sendPhoto(chatId, `./public/taxiGeneral.jpg`, getTaxiGeneralMenuAnswer());
            break;
        case 'additional': // –î—Ä—É–≥–æ–µ
            await bot.sendPhoto(chatId, `./public/logo.jpg`, getAdditionalMenuAnswer());
            break;
        // –í –º–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤:
        case 'kinoland': // KINOLAND
        if (choiceMenuData !== null) {
            await bot.sendPhoto(chatId, `./public/${query.data}.jpg`, choiceMenuData);
        }
            break;
        case 'hdrezka': // HDREZKA
        if (choiceMenuData !== null) {
            await bot.sendPhoto(chatId, `./public/${query.data}.jpg`, choiceMenuData);
        }
            break;
        // –í –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–µ—Ä–∫–∞–ª–∞–º–∏ –∫–∏–Ω—á–∏–∫–æ–≤:
        case 'checkLastReply': // –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Å—ã–ª—å
            await checkReply(chatId, mirrorType);
            break;
        case 'sendReq': // –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª—å –Ω–∞ –∑–µ—Ä–∫–∞–ª–æ
            await sendEmail('mirror', mirrorType);
            await bot.sendMessage(chatId, '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É. –ï—Å–ª–∏ –æ–Ω–∞ –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç, —Å–æ–∑–¥–∞–π —Ä–µ–ø–æ—Ä—Ç');
            setTimeout(() => bot.sendPhoto(chatId, './public/init.jpg', initialMessage), 2000);
            break;
        case 'createTicket': // –°—Å—ã–ª—å –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
            await sendEmail('ticket', mirrorType);
            await bot.sendMessage(chatId, '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏');
            setTimeout(() => bot.sendPhoto(chatId, './public/init.jpg', initialMessage), 2000);
            break;
        // –í –º–µ–Ω—é —Ç–∞–∫—Å–∏:
        case 'taxiOnline': // –ó–∞–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–∫—Å–∏ –æ–Ω–ª–∞–π–Ω
            await bot.sendPhoto(chatId, './public/taxi.jpg', { ...(getTaxiTypeMenuAnswer('online')) });
            break;
        case 'taxiSouth': // –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ –≥–æ—Ä–æ–¥—É (—é–≥)
            await bot.sendPhoto(chatId, './public/south.jpg', { ...(getTaxiTypeMenuAnswer('south'))});
            break;
        case 'taxiNorth': // –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ –≥–æ—Ä–æ–¥—É (—Å–µ–≤–µ—Ä)
            await bot.sendPhoto(chatId, './public/north.jpg', { ...(getTaxiTypeMenuAnswer('north')) });
            break;
        // –í –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        case 'suggest': // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
            botStateManager.setWaitingForFeedback(chatId);
            await bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–∏–¥–µ—Ç—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ');
            break;
        case 'report': // –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
            botStateManager.setWaitingForFeedback(chatId);
            await bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å');
            break;
        // –î—Ä—É–≥–∏–µ
        case 'mainMenu': // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await bot.sendPhoto(chatId, './public/init.jpg', initialMessage);
            break;
        default:
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–∞–∫—Å–∏
            if (query.data.startsWith('tel:')) {
                const taxiData = query.data.split('|');
                const phoneNumber = taxiData[0].replace('tel:', '');
                const taxiName = taxiData[1];
                await bot.sendMessage(chatId, `–ù–∞–±–∏—Ä–∞–π ${taxiName}, –±—Ä–∞—Ç: ${phoneNumber}`);
                if (taxiName.includes('—é–≥')) {
                    setTimeout(() => bot.sendPhoto(chatId, './public/south.jpg', { ...(getTaxiTypeMenuAnswer('south'))}), 3000);
                } else if (taxiName.includes('—Å–µ–≤–µ—Ä')) {
                    setTimeout(() => bot.sendPhoto(chatId, './public/north.jpg', { ...(getTaxiTypeMenuAnswer('north')) }), 3000);
                } else {
                    setTimeout(() => bot.sendPhoto(chatId, './public/taxi.jpg', { ...(getTaxiTypeMenuAnswer('online')) }), 3000);
                }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥—Ä—É–ø–ø—ã –≤ Telegram
            if (query.data.startsWith('link:')) {
                const groupLink = query.data.replace('link:', '');
                await bot.sendMessage(chatId, `–õ–∏–Ω–∫ –Ω–∞ –≥—Ä—É–ø–ø—É: ${groupLink}`);
            }
            break;
    }
});
